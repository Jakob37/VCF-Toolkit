#!/usr/bin/env python3

import argparse
import subprocess
import os
from glob import glob
import math

import python_utils

__version_info__ = ("1", "0", "0")
__version__ = ".".join(__version_info__)


def main():
    args = parse_arguments()

    dirname = os.path.dirname(os.path.abspath(__file__))

    def fp(target_file):
        return os.path.join(dirname, target_file)

    single_match = False
    vcfs = list()
    if args.vcf is not None:
        for vcf_arg in args.vcf:
            if os.path.isdir(vcf_arg):
                for my_file in os.listdir(vcf_arg):
                    if my_file.endswith(".vcf.gz") or my_file.endswith(".vcf"):
                        dir_wo_suffix = vcf_arg.rstrip("/")
                        vcfs.append(f"{dir_wo_suffix}/{my_file}")
            else:
                for my_file in glob(vcf_arg):
                    if my_file.endswith(".vcf.gz") or my_file.endswith(".vcf"):
                        vcfs.append(my_file)

            if os.path.isfile(vcf_arg) and len(args.vcf) == 1:
                single_match = True

    if args.subcommand == "nrec":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_nrec"), vcf])
    elif args.subcommand == "rec":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_rec"), vcf])
    elif args.subcommand == "peek":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_peek"), vcf])
    elif args.subcommand == "head":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            head_args = [fp("vcf_head"), vcf, args.n]
            if args.keephead:
                head_args.append("keephead")
            subprocess.run(head_args)
    elif args.subcommand == "header":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_header"), vcf])
    elif args.subcommand == "sum":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_sum"), vcf])
    elif args.subcommand == "qualhist":
        assert len(vcfs) == 2
        file_name = vcfs[0]
        png_out = vcfs[1]
        subprocess.run(
            [fp("vcf_qualhist.py"), "--input", file_name, "--output", png_out]
        )
    elif args.subcommand == "prefix":
        assert len(vcfs) == 3
        vcf = vcfs[0]
        prefix = vcfs[1]
        out = vcfs[2]
        subprocess.run(
            [
                fp("vcf_prefixcontigs.py"),
                "--input",
                vcf,
                "--prefix",
                prefix,
                "--output",
                out,
            ]
        )
    elif args.subcommand == "info":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            run_args = [fp("vcf_info"), vcf]
            if args.filter is not None:
                run_args.append(args.filter)
            subprocess.run(run_args)
    elif args.subcommand == "csq":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            run_args = [fp("vcf_csq"), vcf]
            if args.filter is not None:
                run_args.append(args.filter)
            subprocess.run(run_args)
    elif args.subcommand == "csqpy":
        print("csqpy")
        run_args = [fp("vcf_csqpy"), args.vcf]
        if args.chr is not None:
            run_args.extend(["--chr", args.chr])
        if args.pos is not None:
            run_args.extend(["--pos", str(args.pos)])
        subprocess.run(run_args)
    elif args.subcommand == "csqtab":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            run_args = [fp("vcf_csqtab"), "--input", vcf]
            if args.chr is not None:
                run_args.extend(["--chr", args.chr])
            if args.pos is not None:
                run_args.extend(["--pos", args.pos])
            if args.columns is not None:
                run_args.extend(["--columns", args.columns])
            subprocess.run(run_args)
    elif args.subcommand == "get":
        for vcf in vcfs:
            if not single_match:
                print(vcf)

            if args.pattern is not None:
                bash_args = ["-r", args.pattern]
            elif args.chr is not None:
                if args.range is not None:
                    (start, end) = args.range.split(":")
                    bash_args = ["-c", args.chr, "-s", start, "-e", end]
                elif args.pos is not None:
                    bash_args = ["-c", args.chr, "-s", args.pos, "-e", args.pos]
                else:
                    bash_args = ["-c", args.chr]
            else:
                raise ValueError("Must specify --chr if --pattern is not used")

            if args.limit != -1:
                bash_args.extend(["-l", f"{args.limit}"])

            if args.header:
                bash_args.append("-h")

            print(bash_args)

            subprocess.run([fp("vcf_get"), "-f", vcf] + bash_args)
    elif args.subcommand == "infofilter":
        for vcf in vcfs:
            if not single_match:
                print(vcf)

            if args.preparse is not None:
                if args.debug:
                    print(f"{args.preparse} will be parsed into a lambda")
                preparser_fn = eval(args.preparse)
            else:
                preparser_fn = lambda x: x

            python_utils.filter_info(
                vcf, args.info_field, args.comp_val, args.type, preparser_fn, args.debug
            )
    elif args.subcommand == "rankscore":
        for vcf in vcfs:
            if not single_match:
                print(vcf)

            python_utils.print_rankscore(
                vcf,
                args.comp_val,
                args.comp_type,
                args.print_full,
                args.rank_model,
                args.columns,
                args.head,
            )
    elif args.subcommand == "snvdiff":
        python_utils.snv_diff(args.vcf1, args.vcf2, args.print_recs)
    elif args.subcommand == "scorediff":
        python_utils.score_diff(args.vcf1, args.vcf2)
    else:
        raise ValueError("No known subcommand")


def parse_arguments():
    parent_parser = argparse.ArgumentParser()
    parent_parser.add_argument(
        "-v", "--version", action="version", version="%(prog)s (" + __version__ + ")"
    )
    subparsers = parent_parser.add_subparsers(dest="subcommand", required=True)

    add_nrec(subparsers)
    add_rec(subparsers)
    add_peek(subparsers)
    add_head(subparsers)
    add_header(subparsers)
    add_info(subparsers)
    add_csq(subparsers)
    add_csqtab(subparsers)
    add_csqpy(subparsers)
    add_sum(subparsers)
    add_get(subparsers)
    add_qualhist(subparsers)
    add_prefix(subparsers)
    add_infofilter(subparsers)
    add_snvdiff(subparsers)
    add_rankscore(subparsers)
    add_scorediff(subparsers)

    args = parent_parser.parse_args()
    return args


def add_nrec(subparsers):
    parser = subparsers.add_parser("nrec")
    parser.add_argument("vcf", nargs="*", default=".")


def add_rec(subparsers):
    parser = subparsers.add_parser("rec")
    parser.add_argument("vcf", nargs="*")


def add_peek(subparsers):
    parser = subparsers.add_parser("peek")
    parser.add_argument("vcf", nargs="*")


def add_head(subparsers):
    parser = subparsers.add_parser("head")
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("-n", default="5")
    parser.add_argument("--keephead", action="store_true")


def add_header(subparsers):
    parser = subparsers.add_parser("header")
    parser.add_argument("vcf", nargs="*")


def add_info(subparsers):
    parser = subparsers.add_parser("info")
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("--filter", default=None)


def add_csq(subparsers):
    parser = subparsers.add_parser("csq")
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("--filter", default=None)


def add_csqtab(subparsers):
    parser = subparsers.add_parser("csqtab")
    parser.add_argument("vcf", nargs="*")
    parser.add_argument(
        "--chr", default=None, help="Filter position. Use together with --pos."
    )
    parser.add_argument(
        "--pos", default=None, help="Filter position. Use together with --chr."
    )
    parser.add_argument("--columns", default=None, help="Print only specific columns.")


def add_csqpy(subparsers):
    parser = subparsers.add_parser("csqpy")
    parser.add_argument("vcf")
    parser.add_argument("--chr", default="1")
    parser.add_argument("--pos", default=0)


def add_sum(subparsers):
    parser = subparsers.add_parser("sum")
    parser.add_argument("vcf", nargs="*")


def add_qualhist(subparsers):
    parser = subparsers.add_parser("qualhist")
    parser.add_argument("vcf")
    parser.add_argument("out")


def add_get(subparsers):
    parser = subparsers.add_parser(
        "get", description="Retrieve parts of VCF using tabix"
    )
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("--chr", default=None, help="Mandatory")
    parser.add_argument("--range", help="Format: start-end", default=None)
    parser.add_argument("--pos", help="For a single position", default=None)
    parser.add_argument("--pattern", help="Format: chr:start-end", default=None)
    parser.add_argument("--header", help="Retain header", action="store_true")
    parser.add_argument("--limit", help="Limit the number of entries", default=-1)


def add_prefix(subparsers):
    parser = subparsers.add_parser("prefix")
    parser.add_argument("vcf")
    parser.add_argument("prefix")
    parser.add_argument("out")


def add_infofilter(subparsers):
    parser = subparsers.add_parser(
        "infofilter",
        description="Filter for info field values (example to rank score filter: python3 vtk infofilter my.vcf.gz --info_field RankScore --comp_val 17 --type greater --preparse \"lambda x: x.split(':')[1]\")",
    )
    parser.add_argument("vcf", nargs="*")
    parser.add_argument(
        "--info_field", help="The target info field to filter", required=True
    )
    parser.add_argument("--comp_val", help="The value to compare with", required=True)
    parser.add_argument(
        "--type", help="Type of info filtering (equal, greater, less)", default="equal"
    )
    parser.add_argument(
        "--preparse",
        help="Logic to eval preparse. Lambda with one argument expected. Example: \"lambda x: x.split(':')[1]\"",
        default=None,
    )
    parser.add_argument(
        "--debug", help="Helper to debug the command", action="store_true"
    )


def add_snvdiff(subparsers):
    parser = subparsers.add_parser("snvdiff", description="Diff what SNVs are present")
    parser.add_argument("vcf1")
    parser.add_argument("vcf2")
    parser.add_argument(
        "--vcf", help="FIXME: Placeholder as all other commands expects VCFs"
    )
    parser.add_argument("--print_recs", action="store_true")


def add_rankscore(subparsers):
    parser = subparsers.add_parser(
        "rankscore", description="Work directly with rank scores"
    )
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("--comp_val", type=int, default=0, help="Optional threshold")
    parser.add_argument(
        "--comp_type",
        default=None,
        help="Type of filtering ('greater', 'less', 'equal', 'greaterorequal', 'lessorequal', or None)",
    )
    parser.add_argument("--print_full", action="store_true")
    parser.add_argument("--columns", default=None, help="Comma separated string")
    parser.add_argument("--rank_model", default=None)
    parser.add_argument("--head", default=math.inf, type=int)


def add_scorediff(subparsers):
    parser = subparsers.add_parser(
        "scorediff", description="Diff variants on their rank scores"
    )
    parser.add_argument("vcf1")
    parser.add_argument("vcf2")
    parser.add_argument(
        "--vcf", help="FIXME: Placeholder as all other commands expects VCFs"
    )


if __name__ == "__main__":
    main()
